import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

archivesBaseName = "${rootProject.archivesBaseName}-${project.name}"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath.set(project(":common").file("src/main/resources/${project.mod_id}.accesswidener"))

    forge {
        // For some reason gradle doesn't like using rootProject here?
        mixinConfig "${project.mod_id}-common.mixins.json"
        mixinConfig "${project.mod_id}.mixins.json"

        convertAccessWideners.set(true)
        extraAccessWideners.add("${project.mod_id}.accesswidener")

        dataGen {
            mod project.mod_id
        }
    }
    mixin {
        defaultRefmapName = "${project.mod_id}-refmap.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    modApi("gg.moonflower:pollen-forge:${rootProject.pollen_version}")


    // Compat mods
    modCompileOnly "curse.maven:darker-depths-460681:3879776" // Darker Depths
    modCompileOnly "curse.maven:darker-depths-460681:3879776" // Comment this line to test if mod loads correctly when Darker Depths isn't installed
    modCompileOnly "curse.maven:biomesoplenty-220318:3827434"
    modRuntimeOnly "curse.maven:biomesoplenty-220318:3827434" // Comment this line to test if mod loads correctly when BOP isn't installed
    modRuntimeOnly "curse.maven:terrablender-563928:3816497" // Required by Biomes O' Plenty

    modRuntimeOnly "me.djtheredstoner:DevAuth-forge-latest:${rootProject.devauth_version}"
    modRuntimeOnly "curse.maven:configured-457570:3640884"
    modRuntimeOnly "curse.maven:catalogue-459701:3559402"

    shadowCommon(implementation("javazoom:jlayer:1.0.1"))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "id", rootProject.mod_id
    inputs.property "name", rootProject.mod_name
    inputs.property "version", rootProject.mod_version
    inputs.property "repo", rootProject.name

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand "id": rootProject.mod_id,
                "name": rootProject.mod_name,
                "version": rootProject.mod_version,
                "repo": rootProject.name
    }

    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "archiectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = project.archivesBaseName
            from components.java
        }
    }
}